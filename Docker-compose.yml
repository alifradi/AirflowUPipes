x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  image: my-custom-airflow:latest
  env_file:
    - .env
  environment:
    - PYTHONPATH=/opt/airflow
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./data_getters:/opt/airflow/data_getters
    - ${OUTPUT_DIR_HOST:-./master_database/init-scripts}:/opt/airflow/master_database/init-scripts
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./master_database/init-scripts/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: airflow webserver
    ports:
      - "8081:8080"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: airflow scheduler
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $$(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_ui
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  test-permissions:
    image: alpine
    volumes:
      - ./logs:/mnt/host_logs
    command: sh -c "echo 'Attempting to write to /mnt/host_logs...' && date >> /mnt/host_logs/alpine_test.txt && echo 'Write attempt finished. Content of /mnt/host_logs:' && ls -la /mnt/host_logs && cat /mnt/host_logs/alpine_test.txt && echo 'Alpine test completed successfully.' || echo 'Alpine test FAILED to write.'"
    restart: "no"

volumes:
  postgres_data:
  pgadmin_data:
